{"version":3,"sources":["modules/Game.class.js","scripts/main.js"],"names":["Game","initialState","state","map","row","score","status","STATUS","idle","playing","resetState","addCells","count","i","addNewTile","isVictory","win","validState","lose","emptyCells","getEmptyCells","length","randomCell","Math","floor","random","col","flatMap","rowIndex","cell","colIndex","filter","flat","some","tile","size","current","direction","rotatedState","unrotatedState","applyMove","reverse","rotateRight","rotateLeft","isStateEqual","handleMove","nonEmptyTiles","newRow","skipNext","push","matrix","resultMatrix","cols","rows","Array","from","newCol","state1","state2","JSON","stringify","module","exports","require","game","gameBoard","document","querySelectorAll","scoreDisplay","querySelector","startButton","container","messages","render","getState","forEach","index","cellValue","className","textContent","getScore","showMessage","gameStatus","getStatus","key","Object","hasOwnProperty","call","message","classList","toggle","startGame","start","remove","add","restart","handleKeydown","e","addEventListener"],"mappings":"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","file":"main.486d8b18.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nclass Game {\n  constructor(initialState = null) {\n    this.initialState = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.state = this.initialState.map(row => [...row]);\n    this.score = 0;\n    this.status = Game.STATUS.idle;\n  }\n\n  static get STATUS() {\n    return {\n      idle: 'idle',\n      playing: 'playing',\n      win: 'win',\n      lose: 'lose',\n    };\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.STATUS.playing;\n    this.resetState();\n    this.addCells(2);\n  }\n\n  restart() {\n    this.resetState();\n    this.status = Game.STATUS.idle;\n  }\n\n  resetState() {\n    this.state = this.initialState.map(row => [...row]);\n    this.score = 0;\n  }\n\n  addCells(count = 1) {\n    for (let i = 0; i < count; i++) {\n      this.addNewTile();\n    }\n\n    if (this.isVictory()) {\n      this.status = Game.STATUS.win;\n    } else if (!this.validState()) {\n      this.status = Game.STATUS.lose;\n    }\n  }\n\n  addNewTile() {\n    const emptyCells = this.getEmptyCells();\n\n    if (!emptyCells.length) {\n      return;\n    }\n\n    const randomCell = Math.floor(Math.random() * emptyCells.length);\n    const [row, col] = emptyCells[randomCell];\n\n    this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  getEmptyCells() {\n    return this.state\n      .flatMap((row, rowIndex) =>\n        row.map((cell, colIndex) => (cell === 0\n          ? [rowIndex, colIndex]\n          : null\n        )),\n      )\n      .filter(cell => cell !== null);\n  }\n\n  isVictory() {\n    return this.state.flat().some(tile => tile === 2048);\n  }\n\n  validState() {\n    const size = this.state.length;\n\n    for (let row = 0; row < size; row++) {\n      for (let col = 0; col < size; col++) {\n        const current = this.state[row][col];\n\n        if (\n          current === 0\n          || (col < size - 1 && current === this.state[row][col + 1])\n          || (row < size - 1 && current === this.state[row + 1][col])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  handleMove(direction) {\n    if (this.status !== Game.STATUS.playing) {\n      return;\n    }\n\n    let rotatedState;\n    let unrotatedState;\n\n    switch (direction) {\n      case 'left':\n        rotatedState = this.state;\n        unrotatedState = this.state.map((row) => this.applyMove(row));\n        break;\n\n      case 'right':\n        rotatedState = this.state.map((row) => [...row].reverse());\n\n        unrotatedState = rotatedState.map((row) =>\n          this.applyMove(row).reverse(),\n        );\n        break;\n\n      case 'up':\n        rotatedState = this.rotateRight(this.state);\n\n        unrotatedState = this.rotateLeft(\n          rotatedState.map((row) => this.applyMove(row)),\n        );\n        break;\n\n      case 'down':\n        rotatedState = this.rotateLeft(this.state);\n\n        unrotatedState = this.rotateRight(\n          rotatedState.map((row) => this.applyMove(row)),\n        );\n        break;\n\n      default:\n        return;\n    }\n\n    if (!this.isStateEqual(this.state, unrotatedState)) {\n      this.state = unrotatedState;\n      this.addCells();\n    }\n  }\n\n  moveLeft() {\n    this.handleMove('left');\n  }\n\n  moveRight() {\n    this.handleMove('right');\n  }\n\n  moveUp() {\n    this.handleMove('up');\n  }\n\n  moveDown() {\n    this.handleMove('down');\n  }\n\n  applyMove(row) {\n    const nonEmptyTiles = row.filter(tile => tile !== 0);\n    const newRow = [];\n    let skipNext = false;\n\n    for (let i = 0; i < nonEmptyTiles.length; i++) {\n      if (skipNext) {\n        skipNext = false;\n        continue;\n      }\n\n      const current = nonEmptyTiles[i];\n      const next = nonEmptyTiles[i + 1];\n\n      if (current === next) {\n        newRow.push(current * 2);\n        this.score += current * 2;\n        skipNext = true;\n      } else {\n        newRow.push(current);\n      }\n    }\n\n    while (newRow.length < row.length) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  rotateRight(matrix) {\n    const resultMatrix = [];\n    const cols = matrix[0].length;\n    const rows = matrix.length;\n\n    for (let col = 0; col < cols; col++) {\n      resultMatrix.push(Array.from({ length: rows }, () => 0));\n    }\n\n    for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n      for (let colIndex = 0; colIndex < cols; colIndex++) {\n        const newRow = cols - 1 - colIndex;\n        const newCol = rowIndex;\n\n        resultMatrix[newRow][newCol] = matrix[rowIndex][colIndex];\n      }\n    }\n\n    return resultMatrix;\n  }\n\n  rotateLeft(matrix) {\n    const resultMatrix = [];\n    const cols = matrix[0].length;\n    const rows = matrix.length;\n\n    for (let col = 0; col < cols; col++) {\n      resultMatrix.push(Array.from({ length: rows }, () => 0));\n    }\n\n    for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n      for (let colIndex = 0; colIndex < cols; colIndex++) {\n        const newRow = rowIndex;\n        const newCol = cols - 1 - colIndex;\n\n        resultMatrix[newRow][newCol] = matrix[colIndex][rowIndex];\n      }\n    }\n\n    return resultMatrix;\n  }\n\n  isStateEqual(state1, state2) {\n    return JSON.stringify(state1) === JSON.stringify(state2);\n  }\n}\n\nmodule.exports = Game;\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst gameBoard = Array.from(document.querySelectorAll('.field-cell'));\nconst scoreDisplay = document.querySelector('.game-score');\nconst startButton = document.querySelector('.button.start');\nconst container = document.querySelector('.container');\nconst messages = {\n  idle: container.querySelector('.message-start'),\n  lose: container.querySelector('.message-lose'),\n  win: container.querySelector('.message-win'),\n};\n\nfunction render() {\n  const state = game.getState();\n\n  gameBoard.forEach((cell, index) => {\n    const rowIndex = Math.floor(index / 4);\n    const colIndex = index % 4;\n    const cellValue = state[rowIndex][colIndex];\n\n    cell.className = `field-cell field-cell--${cellValue}`;\n    cell.textContent = cellValue === 0 ? '' : cellValue;\n  });\n\n  scoreDisplay.textContent = game.getScore();\n\n  showMessage();\n}\n\nfunction showMessage() {\n  const gameStatus = game.getStatus();\n\n  for (const key in messages) {\n    if (Object.hasOwnProperty.call(messages, key)) {\n      const message = messages[key];\n\n      if (message) {\n        message.classList.toggle('hidden', key !== gameStatus);\n      }\n    }\n  }\n}\n\nfunction startGame() {\n  if (game.getStatus() === Game.STATUS.idle\n  || game.getStatus() === Game.STATUS.lose\n  || game.getStatus() === Game.STATUS.win) {\n    game.start();\n    startButton.textContent = 'Restart';\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n  } else if (game.getStatus() === Game.STATUS.playing) {\n    game.restart();\n    game.start();\n  }\n  render();\n}\n\nfunction handleKeydown(e) {\n  if (game.getStatus() !== Game.STATUS.playing) {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.handleMove('left');\n      break;\n    case 'ArrowRight':\n      game.handleMove('right');\n      break;\n    case 'ArrowUp':\n      game.handleMove('up');\n      break;\n    case 'ArrowDown':\n      game.handleMove('down');\n      break;\n    default:\n      return;\n  }\n  render();\n}\n\nstartButton.addEventListener('click', startGame);\ndocument.addEventListener('keydown', handleKeydown);\n\nrender();\nshowMessage();\n"]}